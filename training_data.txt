Detailed Schema Description for the Chinook Digital Music Store:

1. Table: albums
   - AlbumId: INTEGER, Primary Key, Auto-increment. Unique identifier for an album.
   - Title: NVARCHAR(160), Not Null. The title of the album.
   - ArtistId: INTEGER, Not Null. Foreign key referencing artists.ArtistId.

2. Table: artists
   - ArtistId: INTEGER, Primary Key, Auto-increment. Unique identifier for an artist.
   - Name: NVARCHAR(120). The name of the artist or band.

...

[include full schema here as shown earlier]
CREATE TABLE IF NOT EXISTS "albums"
(
    [AlbumId] INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    [Title] NVARCHAR(160) NOT NULL,
    [ArtistId] INTEGER NOT NULL,
    FOREIGN KEY ([ArtistId]) REFERENCES "artists" ([ArtistId])
        ON DELETE NO ACTION ON UPDATE NO ACTION
);

CREATE TABLE IF NOT EXISTS "artists"
(
    [ArtistId] INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    [Name] NVARCHAR(120)
);

CREATE TABLE IF NOT EXISTS "customers"
(
    [CustomerId] INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    [FirstName] NVARCHAR(40) NOT NULL,
    [LastName] NVARCHAR(20) NOT NULL,
    [Company] NVARCHAR(80),
    [Address] NVARCHAR(70),
    [City] NVARCHAR(40),
    [State] NVARCHAR(40),
    [Country] NVARCHAR(40),
    [PostalCode] NVARCHAR(10),
    [Phone] NVARCHAR(24),
    [Fax] NVARCHAR(24),
    [Email] NVARCHAR(60) NOT NULL,
    [SupportRepId] INTEGER,
    FOREIGN KEY ([SupportRepId]) REFERENCES "employees" ([EmployeeId])
        ON DELETE NO ACTION ON UPDATE NO ACTION
);

CREATE TABLE IF NOT EXISTS "employees"
(
    [EmployeeId] INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    [LastName] NVARCHAR(20) NOT NULL,
    [FirstName] NVARCHAR(20) NOT NULL,
    [Title] NVARCHAR(30),
    [ReportsTo] INTEGER,
    [BirthDate] DATETIME,
    [HireDate] DATETIME,
    [Address] NVARCHAR(70),
    [City] NVARCHAR(40),
    [State] NVARCHAR(40),
    [Country] NVARCHAR(40),
    [PostalCode] NVARCHAR(10),
    [Phone] NVARCHAR(24),
    [Fax] NVARCHAR(24),
    [Email] NVARCHAR(60),
    FOREIGN KEY ([ReportsTo]) REFERENCES "employees" ([EmployeeId])
        ON DELETE NO ACTION ON UPDATE NO ACTION
);

CREATE TABLE IF NOT EXISTS "genres"
(
    [GenreId] INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    [Name] NVARCHAR(120)
);

CREATE TABLE IF NOT EXISTS "invoices"
(
    [InvoiceId] INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    [CustomerId] INTEGER NOT NULL,
    [InvoiceDate] DATETIME NOT NULL,
    [BillingAddress] NVARCHAR(70),
    [BillingCity] NVARCHAR(40),
    [BillingState] NVARCHAR(40),
    [BillingCountry] NVARCHAR(40),
    [BillingPostalCode] NVARCHAR(10),
    [Total] NUMERIC(10,2) NOT NULL,
    FOREIGN KEY ([CustomerId]) REFERENCES "customers" ([CustomerId])
        ON DELETE NO ACTION ON UPDATE NO ACTION
);

CREATE TABLE IF NOT EXISTS "invoice_items"
(
    [InvoiceLineId] INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    [InvoiceId] INTEGER NOT NULL,
    [TrackId] INTEGER NOT NULL,
    [UnitPrice] NUMERIC(10,2) NOT NULL,
    [Quantity] INTEGER NOT NULL,
    FOREIGN KEY ([InvoiceId]) REFERENCES "invoices" ([InvoiceId])
        ON DELETE NO ACTION ON UPDATE NO ACTION,
    FOREIGN KEY ([TrackId]) REFERENCES "tracks" ([TrackId])
        ON DELETE NO ACTION ON UPDATE NO ACTION
);

CREATE TABLE IF NOT EXISTS "media_types"
(
    [MediaTypeId] INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    [Name] NVARCHAR(120)
);

CREATE TABLE IF NOT EXISTS "playlists"
(
    [PlaylistId] INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    [Name] NVARCHAR(120)
);

CREATE TABLE IF NOT EXISTS "playlist_track"
(
    [PlaylistId] INTEGER NOT NULL,
    [TrackId] INTEGER NOT NULL,
    CONSTRAINT [PK_PlaylistTrack] PRIMARY KEY ([PlaylistId], [TrackId]),
    FOREIGN KEY ([PlaylistId]) REFERENCES "playlists" ([PlaylistId])
        ON DELETE NO ACTION ON UPDATE NO ACTION,
    FOREIGN KEY ([TrackId]) REFERENCES "tracks" ([TrackId])
        ON DELETE NO ACTION ON UPDATE NO ACTION
);

CREATE TABLE IF NOT EXISTS "tracks"
(
    [TrackId] INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    [Name] NVARCHAR(200) NOT NULL,
    [AlbumId] INTEGER,
    [MediaTypeId] INTEGER NOT NULL,
    [GenreId] INTEGER,
    [Composer] NVARCHAR(220),
    [Milliseconds] INTEGER NOT NULL,
    [Bytes] INTEGER,
    [UnitPrice] NUMERIC(10,2) NOT NULL,
    FOREIGN KEY ([AlbumId]) REFERENCES "albums" ([AlbumId])
        ON DELETE NO ACTION ON UPDATE NO ACTION,
    FOREIGN KEY ([GenreId]) REFERENCES "genres" ([GenreId])
        ON DELETE NO ACTION ON UPDATE NO ACTION,
    FOREIGN KEY ([MediaTypeId]) REFERENCES "media_types" ([MediaTypeId])
        ON DELETE NO ACTION ON UPDATE NO ACTION
);
"""
The Chinook database is a digital music store schema.

Key Entities:

- **Customers**: People who buy music. Each customer has a first name, last name, contact info, and may be assigned a support representative (an employee).

- **Employees**: Staff members of the company. Each employee has a title (like 'Sales Support Agent' or 'General Manager'), reports to a supervisor, and may support one or more customers.

- **Invoices**: Represent purchases made by customers. An invoice includes the customer, invoice date, billing information, and total amount.

- **Invoice_Items**: Line items in each invoice. Each item represents a track purchased, with quantity and unit price.

- **Tracks**: Individual songs available in the store. Each track belongs to an album, has a media type (e.g. MPEG, AAC), a genre (e.g. Rock, Jazz), and information such as duration and price.

- **Albums**: Collections of tracks. Each album is associated with an artist.

- **Artists**: Performers or bands. Each artist may have multiple albums.

- **Genres**: Categories of music such as Rock, Pop, Jazz, etc. Each track can belong to one genre.

- **Media_Types**: The format in which a track is available, such as MPEG audio or AAC audio.

- **Playlists**: Custom collections of tracks. Users can organize their favorite songs into playlists.

- **Playlist_Track**: A many-to-many relationship between playlists and tracks.

Important Relationships:

- Customers are linked to employees via `SupportRepId`.
- Invoices are linked to customers via `CustomerId`.
- Invoice items link to both invoices (`InvoiceId`) and tracks (`TrackId`).
- Tracks are linked to albums, media types, and genres.
- Albums are linked to artists.
- Employees may report to other employees via `ReportsTo`.

Usage Tips:

- To analyze revenue, sum the `Total` column in the `invoices` table.
- To find the most popular track, count entries in `invoice_items` grouped by `TrackId`.
- Use joins between `customers`, `invoices`, and `invoice_items` to analyze customer spending.
- Use the `employees` table to understand team structure and customer support coverage.

The schema supports a realistic sales reporting system for a digital music business.
Training Examples:

Q: Get all employees with the title 'Sales Support Agent'
A: SELECT FirstName, LastName FROM employees WHERE Title = 'Sales Support Agent';

Q: List the top 5 customers by total spending
A: SELECT c.FirstName, c.LastName, SUM(i.Total) AS TotalSpent
   FROM customers c
   JOIN invoices i ON c.CustomerId = i.CustomerId
   GROUP BY c.CustomerId
   ORDER BY TotalSpent DESC
   LIMIT 5;

... [other training examples]
